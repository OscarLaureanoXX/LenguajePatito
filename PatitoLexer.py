# Generated from Patito.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\34")
        buf.write("\u00a4\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3")
        buf.write("\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\6\30\u0084")
        buf.write("\n\30\r\30\16\30\u0085\3\30\3\30\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u0092\n\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u009e\n\32\3\33\6")
        buf.write("\33\u00a1\n\33\r\33\16\33\u00a2\2\2\34\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\3\2\4\5\2\13\f\17\17\"\"\4\2C\\c|\2\u00a8\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\3\67\3\2\2\2")
        buf.write("\5?\3\2\2\2\7A\3\2\2\2\tE\3\2\2\2\13G\3\2\2\2\rI\3\2\2")
        buf.write("\2\17K\3\2\2\2\21M\3\2\2\2\23O\3\2\2\2\25T\3\2\2\2\27")
        buf.write("V\3\2\2\2\31[\3\2\2\2\33c\3\2\2\2\35n\3\2\2\2\37q\3\2")
        buf.write("\2\2!s\3\2\2\2#u\3\2\2\2%x\3\2\2\2\'z\3\2\2\2)|\3\2\2")
        buf.write("\2+~\3\2\2\2-\u0080\3\2\2\2/\u0083\3\2\2\2\61\u0091\3")
        buf.write("\2\2\2\63\u009d\3\2\2\2\65\u00a0\3\2\2\2\678\7r\2\289")
        buf.write("\7t\2\29:\7q\2\2:;\7i\2\2;<\7t\2\2<=\7c\2\2=>\7o\2\2>")
        buf.write("\4\3\2\2\2?@\7=\2\2@\6\3\2\2\2AB\7x\2\2BC\7c\2\2CD\7t")
        buf.write("\2\2D\b\3\2\2\2EF\7.\2\2F\n\3\2\2\2GH\7<\2\2H\f\3\2\2")
        buf.write("\2IJ\7}\2\2J\16\3\2\2\2KL\7\177\2\2L\20\3\2\2\2MN\7?\2")
        buf.write("\2N\22\3\2\2\2OP\7k\2\2PQ\7h\2\2QR\7\"\2\2RS\7*\2\2S\24")
        buf.write("\3\2\2\2TU\7+\2\2U\26\3\2\2\2VW\7g\2\2WX\7n\2\2XY\7u\2")
        buf.write("\2YZ\7g\2\2Z\30\3\2\2\2[\\\7r\2\2\\]\7t\2\2]^\7k\2\2^")
        buf.write("_\7p\2\2_`\7v\2\2`a\7\"\2\2ab\7*\2\2b\32\3\2\2\2cd\7e")
        buf.write("\2\2de\7v\2\2ef\7g\2\2fg\7\60\2\2gh\7u\2\2hi\7v\2\2ij")
        buf.write("\7t\2\2jk\7k\2\2kl\7p\2\2lm\7i\2\2m\34\3\2\2\2no\7+\2")
        buf.write("\2op\7=\2\2p\36\3\2\2\2qr\7@\2\2r \3\2\2\2st\7>\2\2t\"")
        buf.write("\3\2\2\2uv\7>\2\2vw\7@\2\2w$\3\2\2\2xy\7-\2\2y&\3\2\2")
        buf.write("\2z{\7/\2\2{(\3\2\2\2|}\7,\2\2}*\3\2\2\2~\177\7\61\2\2")
        buf.write("\177,\3\2\2\2\u0080\u0081\7*\2\2\u0081.\3\2\2\2\u0082")
        buf.write("\u0084\t\2\2\2\u0083\u0082\3\2\2\2\u0084\u0085\3\2\2\2")
        buf.write("\u0085\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0087\3")
        buf.write("\2\2\2\u0087\u0088\b\30\2\2\u0088\60\3\2\2\2\u0089\u008a")
        buf.write("\7k\2\2\u008a\u008b\7p\2\2\u008b\u0092\7v\2\2\u008c\u008d")
        buf.write("\7h\2\2\u008d\u008e\7n\2\2\u008e\u008f\7q\2\2\u008f\u0090")
        buf.write("\7c\2\2\u0090\u0092\7v\2\2\u0091\u0089\3\2\2\2\u0091\u008c")
        buf.write("\3\2\2\2\u0092\62\3\2\2\2\u0093\u0094\7k\2\2\u0094\u009e")
        buf.write("\7f\2\2\u0095\u0096\7e\2\2\u0096\u0097\7v\2\2\u0097\u0098")
        buf.write("\7g\2\2\u0098\u009e\7n\2\2\u0099\u009a\7e\2\2\u009a\u009b")
        buf.write("\7v\2\2\u009b\u009c\7g\2\2\u009c\u009e\7h\2\2\u009d\u0093")
        buf.write("\3\2\2\2\u009d\u0095\3\2\2\2\u009d\u0099\3\2\2\2\u009e")
        buf.write("\64\3\2\2\2\u009f\u00a1\t\3\2\2\u00a0\u009f\3\2\2\2\u00a1")
        buf.write("\u00a2\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a2\u00a3\3\2\2\2")
        buf.write("\u00a3\66\3\2\2\2\7\2\u0085\u0091\u009d\u00a2\3\b\2\2")
        return buf.getvalue()


class PatitoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    WS = 23
    TIPO = 24
    VARCTE = 25
    ID = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "';'", "'var'", "','", "':'", "'{'", "'}'", "'='", 
            "'if ('", "')'", "'else'", "'print ('", "'cte.string'", "');'", 
            "'>'", "'<'", "'<>'", "'+'", "'-'", "'*'", "'/'", "'('" ]

    symbolicNames = [ "<INVALID>",
            "WS", "TIPO", "VARCTE", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "WS", "TIPO", "VARCTE", "ID" ]

    grammarFileName = "Patito.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


